#!/usr/bin/env python
# -*- coding: UTF-8 -*-
    # above not needed for Py3
"""Find and delete duplicate files within a specified tree."""

from __future__ import unicode_literals  # This sets py2.7 default string literal to unicode from str.  No 'u' required on strings.
from __future__ import print_function    # This redefines print as a function, as in py3.  Forces writing compatible code.
    # above two not needed for Py3

__version__ = "v0.2 200602"


#==========================================================
#
#  Chris Nelson, January 2019-2020
#
# 200602 v0.2  Fixed --purge help typo
# 200306 v0.1  New
#
# Changes pending
#   Add filename filter?
#   
#==========================================================

import argparse
import sys
import os.path
import shutil
import io
import time
import tempfile
import collections
import signal       # For keyboard interrupt handler


def main():
    if args.thumbs:
        print('Checking for .Thumbnails directories.')
    else:
        if args.no_size:
            _size = "ANY"
        else:
            _size = "MATCHING"
        if args.no_time:
            _time = "ANY"
        else:
            _time = "MATCHING"
        print("Checking for files with {} timestamp and {} size.".format(_time, _size))


    file_list, thumbs_dirs = scan_tree(args.main_root)
    if not args.second_tree:            # Operate on main tree
        if not args.thumbs:
            file_count = 0
            delete_count = 0
            for _file in file_list:
                if len(file_list[_file]["instances"]) > 1:
                    print ("File <{}> has {} copies".format(file_list[_file]["filename"], len(file_list[_file]["instances"])))
                    file_count += len(file_list[_file]["instances"]) -1
                    for instance in file_list[_file]["instances"]:
                        print ("    {}  {:10} bytes    {}".format(
                            time.asctime(time.localtime(instance[2])),
                            instance[1],
                            instance[0]))
                        if instance[0].endswith("Camera"):
                            if args.purge:
                                delete_count += 1
                                full_file_path = os.path.join(instance[0],file_list[_file]["filename"])
                                print("        File removed:  <{}>".format(full_file_path))
                                os.remove(full_file_path)
            print ("Found  {}  duplicate files.  Deleted  {}  duplicate files.".format(file_count, delete_count))
        else:
            if len(thumbs_dirs) == 0:
                print ("No .Thumbnails dirs found.")
            else:
                print ("Found .Thumbnails dirs:")
                for dir in thumbs_dirs:
                    print ("   ", dir)
                    if args.purge:
                        print("        Dir removed:  <{}>".format(dir))
                        shutil.rmtree(dir)


    else:
        print("Operating on --second-tree only")
        _2nd_file_list, thumbs_dirs = scan_tree(args.second_tree)
        if not args.thumbs:
            file_count = 0
            delete_count = 0
            # for _file in file_list:
            #     if _file in _2nd_file_list:
            for _file in _2nd_file_list:
                if _file in file_list:
                    print ("Found instance(s) of File <{}> in second tree that exist in the main tree:".format(
                        file_list[_file]["filename"]))
                    print ("    Main tree:    {}  {:10} bytes    {}".format(
                        time.asctime(time.localtime(file_list[_file]["instances"][0][2])),
                        file_list[_file]["instances"][0][1],
                        file_list[_file]["instances"][0][0]))
                    for instance in _2nd_file_list[_file]["instances"]:
                        file_count += 1
                        print ("    Second tree:  {}  {:10} bytes    {}".format(
                            time.asctime(time.localtime(instance[2])),
                            instance[1],
                            instance[0]))
                        if args.purge:
                            delete_count += 1
                            full_file_path = os.path.join(instance[0], file_list[_file]["filename"])
                            print("        File removed:  <{}>".format(full_file_path))
                            os.remove(full_file_path)
            print ("Found  {}  duplicate files.  Deleted  {}  duplicate files.".format(file_count, delete_count))
        else:
            if len(thumbs_dirs) == 0:
                print ("No .Thumbnails dirs found.")
            else:
                print ("Found .Thumbnails dirs:")
                for dir in thumbs_dirs:
                    print ("   ", dir)
                    if args.purge:
                        print("        Dir removed:  <{}>".format(dir))
                        shutil.rmtree(dir)


def scan_tree(tree_root):
    unique_file_list = {}
    thumbnails_dirs = []

    for root, dirs, files in os.walk(tree_root):
        for _file in files:
            if not root.endswith(".Thumbnails"):
                full_file_path = os.path.join(root,_file)
                size = os.stat(full_file_path).st_size
                mod_time = os.stat(full_file_path).st_mtime
                key = _file
                if not args.no_size:
                    key += ("__" + str(size))
                if not args.no_time:
                    key += ("__" + str(mod_time))

                if key not in unique_file_list:
                    unique_file_list[key] = {"filename":_file, "instances":[[root, size, mod_time]]}
                else:
                    unique_file_list[key]["instances"].append([root, size, mod_time])
            else:
                if root not in thumbnails_dirs:
                    thumbnails_dirs.append(root)
    
    if len(unique_file_list) == 0:
        print ("No files found in the tree <{}>.  Aborting.".format(tree_root))
        exit()

    return collections.OrderedDict(sorted(unique_file_list.items())), thumbnails_dirs
    

def keyboardInterruptHandler(signal, frame):
    print("KeyboardInterrupt (ID: {}) has been caught. Cleaning up...".format(signal))
    exit(0)
signal.signal(signal.SIGINT, keyboardInterruptHandler)
    

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('main_root',
                        help="Root of the main tree.  In single tree mode, duplicates in <main_root>/Camera will be deleted.")
    parser.add_argument('--no-size',
                        help="Disregard file size when identifying duplicates.  Size is included by default.",
                        action='store_true')
    parser.add_argument('--no-time',
                        help="Disregard file modification time when identifying duplicates.  Time is included by default.",
                        action='store_true')
    parser.add_argument('--second-tree',
                        help="Root of other archive tree.  Duplicate files will be deleted from this tree.")
    parser.add_argument('--thumbs',
                        help="Find .Thumbnails directories.  Delete with --purge.",
                        action='store_true')
    parser.add_argument('--purge',
                        help="Do identified deletes.  Without --purge, print duplicates only.",
                        action='store_true')
    parser.add_argument('-V', '--version', action='version', version='%(prog)s ' + __version__,
                        help="Return version number and exit.")

    args = parser.parse_args()
    
    if not os.path.exists(args.main_root):
        print ("Can't find the base directory <{}>".format(args.main_root))
        exit()
    if args.second_tree:
        if not os.path.exists(args.second_tree):
            print ("Can't find the --second-tree directory <{}>".format(args.second_tree))
            exit()

    main()
